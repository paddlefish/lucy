<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Theme Configurator</title>
  <base href="/"> <!-- Base URL will be updated dynamically -->
</head>
<body>
  <div id="template">
    <h1>Welcome to the Theme Configurator</h1>
    <!--feature-->
    <img src="{{image1}}" alt="Random Theme Image">
    <img src="{{banner}}" alt="Random Banner Image">
  </div>

  <script>
    // Client-side JavaScript version of Perl CGI Theme Configurator
    // Replaced placeholder data with actual themes and features

    const themes = [
      "General/Blowing", "General/Crazy", "General/DogCar", "General/duJour", "General/GreenSnoopy", "General/Groucho",
      "General/Grover", "General/iLucy", "General/Latte", "General/lucysnow", "General/Olympics", "General/Oscar",
      "General/Pointer", "General/Rainbow", "General/Shovel", "General/Soap", "General/Spelling", "General/Squares",
      "Specific/Easter", "Specific/Irish", "Specific/NewYear", "Specific/Valentines"
    ];

    const features = [
      "BakingGame", "BananaMadlib", "Cheerios", "DinnerMadlib", "FutureMadlib", "GopherMaze", "HideAndSeek", "Jokes", 
      "JungleBoggle", "LorroStory", "LucyShell", "MadLibs", "MassGame", "Maze", "Milkbonionaire", "Patricks", "Postcard", 
      "Puzzle", "Riddle", "ScienceMadlib", "SpaceRace", "StarWarsMadlib", "StompGame", "SwitchPuzzle", "Trivia", 
      "Valentine", "ValentineCraft"
    ];

    // Function to initialize the theme configurator
    async function initThemeConfigurator() {
      const today = new Date();
      const randomizer = today.getMonth() * 31 + today.getFullYear() * 365 + today.getDate();
      const selectedTheme = themes[randomIndex(themes.length, randomizer)];
      const selectedFeature = features[randomIndex(features.length, randomizer)];

      // Set base URL for the selected theme
      const baseUrl = window.location.origin + "/lucy/";
      document.querySelector('base').setAttribute('href', `${baseUrl}${selectedTheme}/`);

      // Load theme assets dynamically (e.g., images, gifs)
      await loadThemeAssets(selectedTheme);
      
      // Add the feature content to the page
      await addFeatureContent(selectedFeature);

      // Apply token replacements in the template
      applyTemplateReplacements();
    }

    // Utility to calculate random index
    function randomIndex(maxLength, randomizer) {
      return randomizer % maxLength;
    }

    // Function to load theme assets
    async function loadThemeAssets(theme) {
      // Simulate reading files in the theme directory
      const assets = ["image1.jpg", "banner.gif"]; // Placeholder assets, replace with real ones
      const replacements = {};
      assets.forEach(file => {
        const [shortcut] = file.split('.');
        replacements[shortcut] = file;
      });
      window.replacements = replacements; // Store for later use
    }

    // Function to add feature content to the page
    async function addFeatureContent(feature) {
      // Simulate reading an HTML feature file
      const featureContent = `<div>Feature content for today's random feature: ${feature}</div>`; // Updated to show the selected feature name
      window.replacements = {
        ...window.replacements,
        "<!--feature-->": featureContent
      };
    }

    // Function to replace tokens in the template
    function applyTemplateReplacements() {
      const replacements = window.replacements;
      const template = document.getElementById('template');
      let content = template.innerHTML;
      for (const [key, value] of Object.entries(replacements)) {
        const pattern = new RegExp(`{{${key}}}`, 'g');
        content = content.replace(pattern, value);
      }
      template.innerHTML = content;
    }

    // Example usage: add an event listener to execute when DOM is fully loaded
    document.addEventListener("DOMContentLoaded", initThemeConfigurator);
  </script>
</body>
</html>

